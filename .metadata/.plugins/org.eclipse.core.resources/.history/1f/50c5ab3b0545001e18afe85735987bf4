package com.booking.controller;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.booking.exception.BookingNotFoundException;
import com.booking.kafka.BookingKafkaProducer;
import com.booking.model.Booking;
import com.booking.service.IBookingService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;

import org.springframework.http.ResponseEntity;

import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/booking")
public class BookingController {

	@Autowired
	private IBookingService bookingService;
	@Autowired
	private BookingKafkaProducer bookingKafkaProducer;

	@PostMapping
	public ResponseEntity<String> createBooking(@RequestBody Booking booking) {
		return bookingService.createBooking(booking);

	}

	@GetMapping("/{bookingId}")
	public ResponseEntity<Booking> getBookingById(@PathVariable Long bookingId) {
		try {
			ResponseEntity<Booking> booking = bookingService.getBookingById(bookingId);
			return ResponseEntity.ok(booking.getBody());
		} catch (BookingNotFoundException ex) {
			return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
		}
	}

	@GetMapping
	public ResponseEntity<List<Booking>> getAllBookings() {
		List<Booking> bookings = bookingService.getAllBookings();
		return ResponseEntity.ok(bookings);
	}

	@PutMapping("/{bookingId}")
	public ResponseEntity<String> updateBooking(@PathVariable Long bookingId, @RequestBody Booking updatedBooking) {
		try {
			return bookingService.updateBooking(bookingId, updatedBooking);
		} catch (BookingNotFoundException ex) {
			return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Booking not found");

		}
	}

	@DeleteMapping("/{bookingId}")
	public ResponseEntity<String> deleteBooking(@PathVariable Long bookingId) {
		try {
			bookingService.deleteBooking(bookingId);
			return ResponseEntity.ok("Booking deleted successfully");
		} catch (BookingNotFoundException ex) {
			return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Booking not found");
		}
	}

}
