package com.booking.config;

import org.springframework.context.annotation.Configuration;

import org.springframework.kafka.annotation.EnableKafka;

import org.springframework.kafka.core.ProducerFactory;

import org.springframework.kafka.core.KafkaTemplate;

import org.springframework.kafka.core.DefaultKafkaProducerFactory;

import org.springframework.kafka.core.ProducerConfig;

import org.springframework.kafka.core.ConsumerFactory;

import org.springframework.kafka.core.DefaultKafkaConsumerFactory;

import org.springframework.kafka.core.ConsumerConfig;

import org.springframework.kafka.listener.ConcurrentMessageListenerContainer;

import org.springframework.kafka.listener.ConcurrentKafkaListenerContainerFactory;

import org.springframework.kafka.listener.SeekToCurrentErrorHandler;

import org.springframework.kafka.listener.ErrorHandler;

import org.springframework.kafka.support.serializer.ErrorHandlingDeserializer;

import org.springframework.kafka.support.serializer.JsonDeserializer;

 

import java.util.Map;

import java.util.HashMap;

 

@Configuration

@EnableKafka

public class KafkaConfig {

 

    // Kafka producer configuration

    public ProducerFactory<String, Object> producerFactory() {

        Map<String, Object> props = new HashMap<>();

        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, "kafka-server:9092"); // Replace with your Kafka server address

        // Add more producer configuration properties

        

        return new DefaultKafkaProducerFactory<>(props);

    }

 

    public KafkaTemplate<String, Object> kafkaTemplate() {

        return new KafkaTemplate<>(producerFactory());

    }

 

    // Kafka consumer configuration

    public ConsumerFactory<String, Object> consumerFactory() {

        Map<String, Object> props = new HashMap<>();

        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, "kafka-server:9092"); // Replace with your Kafka server address

        // Add more consumer configuration properties

 

        JsonDeserializer<Object> deserializer = new JsonDeserializer<>(Object.class);

        deserializer.setRemoveTypeHeaders(false);

        deserializer.addTrustedPackages("*");

        deserializer.setUseTypeMapperForKey(true);

        ErrorHandlingDeserializer<Object> errorHandlingDeserializer = new ErrorHandlingDeserializer<>(deserializer);

 

        return new DefaultKafkaConsumerFactory<>(props, errorHandlingDeserializer, errorHandlingDeserializer);

    }

 

    public ConcurrentKafkaListenerContainerFactory<String, Object> kafkaListenerContainerFactory() {

        ConcurrentKafkaListenerContainerFactory<String, Object> factory = new ConcurrentKafkaListenerContainerFactory<>();

        factory.setConsumerFactory(consumerFactory());

        // Add more listener container configuration

        

        return factory;

    }

}
